"use strict";(self.webpackChunkdesmjs_documentation=self.webpackChunkdesmjs_documentation||[]).push([[8485],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var s=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=s.createContext({}),l=function(e){var t=s.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=l(e.components);return s.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?s.createElement(f,r(r({ref:t},c),{},{components:n})):s.createElement(f,r({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,r[1]=i;for(var l=2;l<o;l++)r[l]=n[l];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>m});n(7378);var s=n(5318);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function r(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const i={sidebar_label:"Querying data from the chain",sidebar_position:3},p="Querying data from the chain",l={unversionedId:"query-data",id:"query-data",title:"Querying data from the chain",description:"Overview",source:"@site/docs/query-data.md",sourceDirName:".",slug:"/query-data",permalink:"/query-data",draft:!1,editUrl:"https://github.com/desmos-labs/desmjs/tree/master/docs/docs/query-data.md",tags:[],version:"current",lastUpdatedAt:1692035651,formattedLastUpdatedAt:"Aug 14, 2023",sidebarPosition:3,frontMatter:{sidebar_label:"Querying data from the chain",sidebar_position:3},sidebar:"docs",previous:{title:"Performing transactions",permalink:"/perform-transactions"},next:{title:"DesmJS Keplr",permalink:"/packages/desmsj-keplr"}},c={},m=[{value:"Overview",id:"overview",level:2},{value:"Examples",id:"examples",level:2},{value:"Fetch a Desmos profile",id:"fetch-a-desmos-profile",level:3},{value:"Fetch relationships created from a user",id:"fetch-relationships-created-from-a-user",level:3},{value:"Fetch the details of a subspace",id:"fetch-the-details-of-a-subspace",level:3},{value:"Fetch a post from a subspace",id:"fetch-a-post-from-a-subspace",level:3},{value:"Iterate over the posts of a subspace",id:"iterate-over-the-posts-of-a-subspace",level:3},{value:"Fetch reactions toward a post",id:"fetch-reactions-toward-a-post",level:3},{value:"Fetch reports toward a user",id:"fetch-reports-toward-a-user",level:3},{value:"Fetch reports toward a post",id:"fetch-reports-toward-a-post",level:3}],u={toc:m};function d(e){var{components:t}=e,n=r(e,["components"]);return(0,s.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},s=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(s=s.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),s.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"querying-data-from-the-chain"},"Querying data from the chain"),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,"To fetch data from the chain you need to have a properly initialized ",(0,s.kt)("inlineCode",{parentName:"p"},"DesmosClient"),".",(0,s.kt)("br",{parentName:"p"}),"\n","Then with the ",(0,s.kt)("a",{parentName:"p",href:"/api/desmjs/classes/DesmosClient#querier"},(0,s.kt)("inlineCode",{parentName:"a"},"querier"))," method you can get\na ",(0,s.kt)("a",{parentName:"p",href:"/api/desmjs/modules#desmosqueryclient"},(0,s.kt)("inlineCode",{parentName:"a"},"DesmosQueryClient")),"\nthat exposes the methods to query the chain."),(0,s.kt)("p",null,"Here you can find the functions exposed from ",(0,s.kt)("inlineCode",{parentName:"p"},"DesmosQueryClient")," divided by modules:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/desmjs/interfaces/Profiles.v3.ProfilesV3Extension"},"Profile v3")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/desmjs/interfaces/Relationships.v1.RelationshipsV1Extension"},"Relationships v1")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/desmjs/interfaces/Subspaces.v3.SubspacesV3Extension"},"Subspaces v3")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/desmjs/interfaces/Posts.v3.PostsExtension"},"Posts v3")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/desmjs/interfaces/Reactions.v1.ReactionsExtension"},"Reactions v1")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/desmjs/interfaces/Reports.v1.ReportsV1Extension"},"Reports v1"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NOTE")," Fetching data directly from the chain can be to slow for certain use cases. For such\ncases we provide some GraphQL endpoint to query the data from the chain. Here you can find the\nendpoints for the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/desmos-labs/mainnet#graphql"},"Mainnet")," and\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/desmos-labs/morpheus/tree/main/morpheus-apollo-3#graphql"},"Testnet")),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("p",null,"Here are some examples that showcase how to query data from the chain."),(0,s.kt)("h3",{id:"fetch-a-desmos-profile"},"Fetch a Desmos profile"),(0,s.kt)("p",null,"Here an example that showcase how to query a Desmos profile from the chain:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { DesmosClient } from "@desmoslabs/desmjs";\n\nconst client = await DesmosClient.connect("https://rpc.mainnet.desmos.network");\n\n// Get the profile by address\nconst profile = await client.querier.profiles.profile("desmos...");\n')),(0,s.kt)("h3",{id:"fetch-relationships-created-from-a-user"},"Fetch relationships created from a user"),(0,s.kt)("p",null,"Here an example that showcase how to query all the relationships created from a user inside a subspace:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { DesmosClient } from "@desmoslabs/desmjs";\nimport { PageRequest } from "@desmoslabs/desmjs-types/cosmos/base/query/v1beta1/pagination";\nimport Long from "long";\n\nconst ITEM_PER_PAGE = 20;\nconst SUBSPACE_ID = Long.fromNumber(1);\n\n\nconst client = await DesmosClient.connect("https://rpc.mainnet.desmos.network");\nconst querier = client.querier;\n\nlet pageRequest: PageRequest | undefined = PageRequest.fromPartial({\n  limit: ITEM_PER_PAGE\n});\n\ndo {\n  const { relationships, pagination } = await querier.relationships.relationships(SUBSPACE_ID, "desmos...");\n  \n  // Process the relationships...\n\n  if (pagination !== undefined) {\n    // We have another page, use nextKey to fetch the next page.\n    // NOTE: Is more efficent to use the key base pagination instead of offset.\n    pageRequest = PageRequest.fromPartial({\n      key: pagination.nextKey,\n      limit: ITEM_PER_PAGE,\n    })\n  } else {\n    // No other pages, set to undefined to exit from the loop.\n    pageRequest = undefined;\n  }\n} while (pageRequest === undefined);\n')),(0,s.kt)("h3",{id:"fetch-the-details-of-a-subspace"},"Fetch the details of a subspace"),(0,s.kt)("p",null,"Here an example that showcase how to fetch the details of a subspace:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { DesmosClient } from "@desmoslabs/desmjs";\nimport Long from "long";\n\nconst SUBSPACE_ID = Long.fromNumber(1);\n\n\nconst client = await DesmosClient.connect("https://rpc.mainnet.desmos.network");\nconst { subspace } = await client.querier.subspaces.subspace(SUBSPACE_ID);\n\nif (subspace !== undefined) {\n  // Subspace found, do operations with it...\n}\n')),(0,s.kt)("h3",{id:"fetch-a-post-from-a-subspace"},"Fetch a post from a subspace"),(0,s.kt)("p",null,"Here an example that showcase how to fetch a specific post from a subspace:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { DesmosClient } from "@desmoslabs/desmjs";\nimport Long from "long";\n\nconst SUBSPACE_ID = Long.fromNumber(1);\nconst POST_ID = Long.fromNumber(1);\n\n\nconst client = await DesmosClient.connect("https://rpc.mainnet.desmos.network");\nconst post = await client.querier.posts.post(SUBSPACE_ID, POST_ID);\n\nif (post !== undefined) {\n  // Subspace found, do operations with it...\n}\n')),(0,s.kt)("h3",{id:"iterate-over-the-posts-of-a-subspace"},"Iterate over the posts of a subspace"),(0,s.kt)("p",null,"Here an example that showcase how to iterate over alle the posts created inside a subspace:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { DesmosClient } from "@desmoslabs/desmjs";\nimport { PageRequest } from "@desmoslabs/desmjs-types/cosmos/base/query/v1beta1/pagination";\nimport Long from "long";\n\nconst ITEM_PER_PAGE = 20;\nconst SUBSPACE_ID = Long.fromNumber(1);\n\n\nconst client = await DesmosClient.connect("https://rpc.mainnet.desmos.network");\nconst querier = client.querier;\n\n// Prepare the pagination configs\nlet pageRequest: PageRequest | undefined = PageRequest.fromPartial({\n  limit: ITEM_PER_PAGE\n});\n\ndo {\n  const { posts, pagination } = await querier.posts.subspacePosts(SUBSPACE_ID, pageRequest);\n  \n  // Process the posts\n  \n  if (pagination !== undefined) {\n    // We have another page, use nextKey to fetch the next page.\n    // NOTE: Is more efficent to use the key base pagination instead of offset.\n    pageRequest = PageRequest.fromPartial({\n      key: pagination.nextKey,\n      limit: ITEM_PER_PAGE,\n    })\n  } else {\n    // No other pages, set to undefined to exit from the loop.\n    pageRequest = undefined;\n  }\n} while (pageRequest !== undefined);\n')),(0,s.kt)("h3",{id:"fetch-reactions-toward-a-post"},"Fetch reactions toward a post"),(0,s.kt)("p",null,"Here an example that showcase how to fetch all the reaction toward a post:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { DesmosClient } from "@desmoslabs/desmjs";\nimport { PageRequest } from "@desmoslabs/desmjs-types/cosmos/base/query/v1beta1/pagination";\nimport Long from "long";\n\nconst ITEM_PER_PAGE = 20;\nconst SUBSPACE_ID = Long.fromNumber(1);\nconst POST_ID = Long.fromNumber(1);\n\n\nconst client = await DesmosClient.connect("https://rpc.mainnet.desmos.network");\nconst querier = client.querier;\n\n// Prepare the pagination configs\nlet pageRequest: PageRequest | undefined = PageRequest.fromPartial({\n  limit: ITEM_PER_PAGE\n});\n\ndo {\n  const { reactions, pagination } = await querier.reactions.reactions(SUBSPACE_ID, POST_ID, pageRequest);\n\n  // Process the reactions...\n\n  if (pagination !== undefined) {\n    // We have another page, use nextKey to fetch the next page.\n    // NOTE: Is more efficent to use the key base pagination instead of offset.\n    pageRequest = PageRequest.fromPartial({\n      key: pagination.nextKey,\n      limit: ITEM_PER_PAGE,\n    })\n  } else {\n    // No other pages, set to undefined to exit from the loop.\n    pageRequest = undefined;\n  }\n} while (pageRequest !== undefined);\n')),(0,s.kt)("h3",{id:"fetch-reports-toward-a-user"},"Fetch reports toward a user"),(0,s.kt)("p",null,"Here an example that showcase how to fetch all the reports toward a user:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { DesmosClient } from "@desmoslabs/desmjs";\nimport { PageRequest } from "@desmoslabs/desmjs-types/cosmos/base/query/v1beta1/pagination";\nimport { Any } from "@desmoslabs/desmjs-types/google/protobuf/any";\nimport { UserTarget } from "@desmoslabs/desmjs-types/desmos/reports/v1/models";\nimport Long from "long";\n\nconst ITEM_PER_PAGE = 20;\nconst SUBSPACE_ID = Long.fromNumber(1);\n\n\nconst client = await DesmosClient.connect("https://rpc.mainnet.desmos.network");\nconst querier = client.querier;\n\n// Prepare the pagination configs\nlet pageRequest: PageRequest | undefined = PageRequest.fromPartial({\n  limit: ITEM_PER_PAGE\n});\n\nconst target = Any.fromPartial({\n  typeUrl: "/desmos.reports.v1.UserTarget",\n  value: UserTarget.encode({\n    user: "desmos...",\n  }).finish(),\n});\n\ndo {\n  const { reports, pagination } = await querier.reports.reports(SUBSPACE_ID, target, undefined, pageRequest);\n\n  // Process the reports...\n\n  if (pagination !== undefined) {\n    // We have another page, use nextKey to fetch the next page.\n    // NOTE: Is more efficent to use the key base pagination instead of offset.\n    pageRequest = PageRequest.fromPartial({\n      key: pagination.nextKey,\n      limit: ITEM_PER_PAGE,\n    })\n  } else {\n    // No other pages, set to undefined to exit from the loop.\n    pageRequest = undefined;\n  }\n} while (pageRequest !== undefined);\n')),(0,s.kt)("h3",{id:"fetch-reports-toward-a-post"},"Fetch reports toward a post"),(0,s.kt)("p",null,"Here an example that showcase how to fetch all the reports toward a post:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { DesmosClient } from "@desmoslabs/desmjs";\nimport { PageRequest } from "@desmoslabs/desmjs-types/cosmos/base/query/v1beta1/pagination";\nimport { Any } from "@desmoslabs/desmjs-types/google/protobuf/any";\nimport { PostTarget } from "@desmoslabs/desmjs-types/desmos/reports/v1/models";\nimport Long from "long";\n\nconst ITEM_PER_PAGE = 20;\nconst SUBSPACE_ID = Long.fromNumber(1);\n\n\nconst client = await DesmosClient.connect("https://rpc.mainnet.desmos.network");\nconst querier = client.querier;\n\n// Prepare the pagination configs\nlet pageRequest: PageRequest | undefined = PageRequest.fromPartial({\n  limit: ITEM_PER_PAGE\n});\n\nconst target = Any.fromPartial({\n  typeUrl: "/desmos.reports.v1.PostTarget",\n  value: PostTarget.encode({\n    postId: Long.fromNumber(1),\n  }).finish(),\n});\n\ndo {\n  const { reports, pagination } = await querier.reports.reports(SUBSPACE_ID, target, undefined, pageRequest);\n\n  // Process the reports...\n\n  if (pagination !== undefined) {\n    // We have another page, use nextKey to fetch the next page.\n    // NOTE: Is more efficent to use the key base pagination instead of offset.\n    pageRequest = PageRequest.fromPartial({\n      key: pagination.nextKey,\n      limit: ITEM_PER_PAGE,\n    })\n  } else {\n    // No other pages, set to undefined to exit from the loop.\n    pageRequest = undefined;\n  }\n} while (pageRequest !== undefined);\n')))}d.isMDXComponent=!0}}]);